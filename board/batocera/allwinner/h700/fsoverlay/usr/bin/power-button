#!/bin/bash
# Suspend or shutdown

# Paths
POWER_BUTTON_STATE="/var/run/power-button-state.flag"
LOCK_FILE="/var/run/power-button-script.lock"
RUMBLE_FILE="/sys/class/power_supply/axp2202-battery/moto"
HALLKEY="/sys/class/power_supply/axp2202-battery/hallkey"
WAKEUP_COUNT="/sys/class/power_supply/axp2202-battery/power/wakeup_count"

# Threshold for long press to shutdown (some boards cut power when power button is held too long)
LONG_PRESS_THRESHOLD=2000  # in milliseconds

suspend_system() {
    # Only suspend if the system does not have a lid sensor
    # (which will be used for suspend in that case)
	if [ ! $HALLKEY ]; then
		pm-is-supported --suspend && pm-suspend
	fi
}

shutdown_system() {
    echo disable > /sys/kernel/debug/dispdbg/command
    echo lcd0 > /sys/kernel/debug/dispdbg/name
    echo 1 > /sys/kernel/debug/dispdbg/start
    amixer set Master mute
    batocera-es-swissknife --emukill
    /usr/bin/poweroff.sh
}

exec 200>"${LOCK_FILE}"
flock -n 200 || exit 1

trap 'flock -u 200; rm -f "${LOCK_FILE}"' EXIT

# Power button press
echo "1" > "$POWER_BUTTON_STATE"

START_TIME=$(date +%s%3N)
WAKEUP_COUNT_START=$(cat ${WAKEUP_COUNT})
while true; do
    sleep 0.1
    
    if [ "$(cat ${POWER_BUTTON_STATE})" = "0" ]; then
        # Power button released
	    suspend_system
    	break
	fi
	
	if [ "$(cat ${WAKEUP_COUNT})" -gt "${WAKEUP_COUNT_START}" ]; then
		# Device has been sleeping; reset power button state and exit loop
		echo "0" > "$POWER_BUTTON_STATE"
		break
	else
	    CURRENT_TIME=$(date +%s%3N)
    	DURATION=$((CURRENT_TIME - START_TIME))
    
	    if [ "${DURATION}" -ge "${LONG_PRESS_THRESHOLD}" ]; then
			# Test sleep counter again in case we were already
			# in this branch when the lid was closed
			if [ "$(cat ${WAKEUP_COUNT})" -le "${WAKEUP_COUNT_START}" ]; then
	   	    	echo 1 > "$RUMBLE_FILE" && sleep 0.1 && echo 0 > "$RUMBLE_FILE"
		        shutdown_system
    		    break
			fi
	    fi
	fi
done

exit 0
