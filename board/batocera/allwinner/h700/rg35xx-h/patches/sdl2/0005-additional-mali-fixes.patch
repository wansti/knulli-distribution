diff -urN a/src/video/mali-fbdev/SDL_maliblitter.c b/src/video/mali-fbdev/SDL_maliblitter.c
--- a/src/video/mali-fbdev/SDL_maliblitter.c	2024-05-18 18:10:45.868590334 +0000
+++ b/src/video/mali-fbdev/SDL_maliblitter.c	2024-05-18 18:10:24.740645905 +0000
@@ -229,8 +229,13 @@
     blitter->glBindTexture(GL_TEXTURE_2D, surf->texture);
     blitter->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
     blitter->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
-    blitter->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
-    blitter->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+    if (blitter->scaler > 0) {
+        blitter->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+        blitter->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+    } else {
+        blitter->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
+        blitter->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
+    }
 
     /* And populate our texture with the EGLImage */
     blitter->glEGLImageTargetTexture2DOES(GL_TEXTURE_2D, surf->egl_image);
@@ -251,18 +256,19 @@
 
     /*
      * SDL_HQ_SCALER: Selects one of the available scalers:
-     * - 0: Linear filtering
-     * - 1: Sharp Bilinear Simple
-     * - 2: Quilez
+     * - 0: Nearest filtering
+     * - 1: Linear filtering
+     * - 2: Sharp Bilinear Simple
+     * - 3: Quilez
      */
+    blitter->scaler = 0;
     if ((use_hq_scaler = SDL_getenv("SDL_HQ_SCALER")) != NULL && *use_hq_scaler != '0') {
         switch (*use_hq_scaler) {
-            case '1': sources[1] = blit_frag_bilinear_simple; break;
-            case '2': sources[1] = blit_frag_quilez; break;
-            default: use_hq_scaler = NULL; break;
+            case '0': blitter->scaler = 0; sources[1] = blit_frag_standard; break;
+            case '1': blitter->scaler = 1; sources[1] = blit_frag_standard; break;
+            case '2': blitter->scaler = 2; sources[1] = blit_frag_bilinear_simple; break;
+            case '3': blitter->scaler = 3; sources[1] = blit_frag_quilez; break;
         }
-    } else {
-        use_hq_scaler = NULL;
     }
 
     /* The blitter thread needs to have an OpenGL ES 2.0 context available! */
@@ -288,8 +294,8 @@
         (rotation == 3) ? "vTexCoord = vec2(-aTexCoord.y, aTexCoord.x);" :
         "#error Orientation out of scope",
         /* scalers */
-        (use_hq_scaler) ? "vTexCoord = vTexCoord;"
-                        : "vTexCoord = vTexCoord / uTexSize;");
+        (blitter->scaler >= 2) ? "vTexCoord = vTexCoord;"
+                               : "vTexCoord = vTexCoord / uTexSize;");
 
     /* Compile vertex shader */
     blitter->vert = blitter->glCreateShader(GL_VERTEX_SHADER);
@@ -608,4 +614,4 @@
     SDL_DestroyCond(blitter->cond);
 }
 
-#endif /* SDL_VIDEO_OPENGL_EGL */
\ No newline at end of file
+#endif /* SDL_VIDEO_OPENGL_EGL */
diff -urN a/src/video/mali-fbdev/SDL_maliblitter.h b/src/video/mali-fbdev/SDL_maliblitter.h
--- a/src/video/mali-fbdev/SDL_maliblitter.h	2024-05-18 18:10:45.868590334 +0000
+++ b/src/video/mali-fbdev/SDL_maliblitter.h	2024-05-18 18:10:24.740645905 +0000
@@ -34,7 +34,8 @@
     int thread_stop;
     int rotation;
     int next;
-    int was_initialized
+    int scaler;
+    int was_initialized;
 
     void *user_data;
 
diff -urN a/src/video/mali-fbdev/SDL_malivideo.c b/src/video/mali-fbdev/SDL_malivideo.c
--- a/src/video/mali-fbdev/SDL_malivideo.c	2024-05-18 18:10:45.868590334 +0000
+++ b/src/video/mali-fbdev/SDL_malivideo.c	2024-05-18 18:10:24.740645905 +0000
@@ -259,13 +259,6 @@
     }
 
     SDL_LogInfo(SDL_LOG_CATEGORY_VIDEO, "mali-fbdev: Creating Pixmap (%dx%d) buffers", width, height);
-    if (_this->gl_config.framebuffer_srgb_capable) {
-        {
-            SDL_SetError("mali-fbdev: EGL implementation does not support sRGB system framebuffers");
-            return EGL_NO_SURFACE;
-        }
-    }
-
     windowdata->back_buffer = 0;
     windowdata->queued_buffer = 1;
     windowdata->front_buffer = 2;
@@ -402,6 +395,7 @@
     SDL_WindowData *windowdata;
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
     SDL_DisplayData *displaydata;
+    EGLContext egl_context;
 
     displaydata = SDL_GetDisplayDriverData(0);
 
@@ -411,11 +405,12 @@
         return SDL_OutOfMemory();
     }
 
-     /* Setup driver data for this window */
-     window->driverdata = windowdata;
+    /* Setup driver data for this window */
+    window->driverdata = windowdata;
 
-    /* Use the entire screen when the blitter isn't enabled */
-    if (displaydata->blitter) {
+    /* Use the entire screen when the blitter isn't enabled or the selected
+       resolution doesn't make any sense. */
+    if ((displaydata->blitter == NULL) || (window->w < 32 || window->h < 32)) {
         SDL_SendWindowEvent(window, SDL_WINDOWEVENT_RESIZED,
                             display->current_mode.w, display->current_mode.h);
     }
@@ -456,6 +451,13 @@
         return SDL_SetError("mali-fbdev: Can't create EGL window surface");
     }
 
+    /* Set the current surface NOW. */
+    egl_context = (EGLContext)SDL_GL_GetCurrentContext();
+    if (SDL_EGL_MakeCurrent(_this, windowdata->egl_surface, egl_context) != 0) {
+        MALI_VideoQuit(_this);
+        return SDL_SetError("mali-fbdev: Can't set EGL context");
+    }
+
     /* One window, it always has focus */
     SDL_SetMouseFocus(window);
     SDL_SetKeyboardFocus(window);
@@ -494,32 +496,47 @@
 MALI_SetWindowSize(_THIS, SDL_Window * window)
 {
     SDL_WindowData *windowdata;
+    SDL_VideoDisplay *display;
     SDL_DisplayData *displaydata;
+    EGLContext egl_context;
 
     windowdata = window->driverdata;
-    displaydata = SDL_GetDisplayDriverData(0);
+    display = SDL_GetDisplayForWindow(window);
+    displaydata = display->driverdata;
 
-    // If we're using the blitter, we need to warn it about the surface reconfiguration!
+    /*
+     * Switch to a fullscreen resolution whenever:
+     * - We are not using the blitter
+     * - A fullscreen was requested
+     * - The window resolution requested doesn't make any sense
+     */
+    if ((displaydata->blitter == NULL)
+        || (window->w < 32 || window->h < 32)
+        || ((window->flags & SDL_WINDOW_FULLSCREEN) == SDL_WINDOW_FULLSCREEN)) {
+        SDL_SendWindowEvent(window, SDL_WINDOWEVENT_RESIZED,
+                            display->current_mode.w, display->current_mode.h);
+    }
+
+    /*
+     * If we're using the blitter, we might need to signal for a surface reconfiguration
+     * if the dimensions of our surface changed.
+     */
     if (displaydata->blitter) {
+        if ((displaydata->blitter->plane_width == window->w)
+         && (displaydata->blitter->plane_height == window->h))
+            return;
+
+        egl_context = (EGLContext)SDL_GL_GetCurrentContext();
         MALI_EGL_DeinitPixmapSurfaces(_this, window);
         windowdata->egl_surface = MALI_EGL_InitPixmapSurfaces(_this, window);
+        SDL_EGL_MakeCurrent(_this, windowdata->egl_surface, egl_context);
     }
 }
 
 void
 MALI_SetWindowFullscreen(_THIS, SDL_Window *window, SDL_VideoDisplay *display, SDL_bool fullscreen)
 {
-    if (fullscreen) {
-        // Remember that SDL_SendWindowEvent sets the window width and height for you, so let's
-        // recall the width and height first.
-        int prev_w = window->w, prev_h = window->h;
-        SDL_SendWindowEvent(window, SDL_WINDOWEVENT_RESIZED,
-            display->current_mode.w, display->current_mode.h);
-
-        // If size has changed, let's reconfigure it.
-        if (display->current_mode.w != prev_w || display->current_mode.h != prev_h)
-            MALI_SetWindowSize(_this, window);
-    }
+    MALI_SetWindowSize(_this, window);
 }
 
 void
